"use client"

import { Separator } from "@/components/ui/separator"
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area"
import { TooltipProvider } from "@/components/ui/tooltip"
import { ToolbarProvider } from "./toolbar-provider"
import type { Editor } from "@tiptap/react"
import { SearchAndReplaceToolbar } from "./search-and-replace-toolbar"
import { cn } from "@/lib/utils"
import {
    Bold,
    Italic,
    Underline,
    Strikethrough,
    Link as LinkIcon,
    Link2Off,
    Code,
    ImageIcon,
    TextQuote,
    ListOrdered,
    List,
    AlignLeft,
    AlignCenter,
    AlignRight,
    AlignJustify,
    Heading1,
    Heading2,
    Heading3,
    Undo,
    Redo,
    Palette,
    Highlighter,
    Maximize,
    MinusSquare,
    CopyCheck,
    Square,
    Superscript,
    Subscript,
    Terminal,
    X,
    Link2,
    SeparatorHorizontal,
    Type,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
    DropdownMenuSeparator,
    DropdownMenuSub,
    DropdownMenuSubContent,
    DropdownMenuSubTrigger,
} from "@/components/ui/dropdown-menu"
import {
    Tooltip,
    TooltipContent,
    TooltipTrigger,
} from "@/components/ui/tooltip"
import { useState, useCallback } from "react"
import { LinkToolbar } from "./link"
import { ImageButton } from "../extensions/image-placeholder"
import { ImageLinkButton } from "../extensions/image-link"
import {
    Popover,
    PopoverContent,
    PopoverTrigger,
} from "@/components/ui/popover"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"

// Declaramos una interfaz genérica para Editor si no está disponible
interface EditorType {
    chain: () => any;
    isActive: (typeOrAttrs: string | Record<string, any>, attrs?: Record<string, any>) => boolean;
    can: () => { undo: () => boolean; redo: () => boolean };
    state: { selection: { empty: boolean } };
    commands: any;
}

export function EditorToolbar({ editor }: { editor: EditorType }) {
    const [activeHeading, setActiveHeading] = useState<string | null>(null)
    const [activeAlign, setActiveAlign] = useState<string | null>("left")
    const [isAddingLink, setIsAddingLink] = useState(false)
    const [linkUrl, setLinkUrl] = useState("")

    const addImage = useCallback(() => {
        const url = window.prompt("URL")

        if (url) {
            if (editor) {
                editor.chain().focus().setImage({ src: url }).run()
            }
        }
    }, [editor])

    const addHorizontalRule = useCallback(() => {
        if (editor) {
            editor.chain().focus().setHorizontalRule().run()
        }
    }, [editor])

    const setLink = useCallback(() => {
        if (editor && linkUrl) {
            if (editor.state.selection.empty) {
                editor
                    .chain()
                    .focus()
                    .extendMarkRange("link")
                    .setLink({ href: linkUrl })
                    .run()
            } else {
                editor.chain().focus().setLink({ href: linkUrl }).run()
            }
            setIsAddingLink(false)
            setLinkUrl("")
        }
    }, [editor, linkUrl])

    const unsetLink = () => {
        if (editor.isActive('link')) {
            editor.chain().focus().extendMarkRange("link").unsetLink().run()
        }
    }

    return (
        <div className="sticky top-0 z-50 w-full border-b bg-background">
            <ToolbarProvider editor={editor}>
                <TooltipProvider>
                    <ScrollArea className="h-fit py-0.5">
                        <div>
                            <div className="flex flex-wrap items-center gap-1 px-2">
                                {/* Historial */}
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().undo().run()}
                                            disabled={!editor.can().undo()}
                                            className="h-8 w-8"
                                        >
                                            <Undo className="h-4 w-4" />
                                            <span className="sr-only">Deshacer</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Deshacer</TooltipContent>
                                </Tooltip>

                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().redo().run()}
                                            disabled={!editor.can().redo()}
                                            className="h-8 w-8"
                                        >
                                            <Redo className="h-4 w-4" />
                                            <span className="sr-only">Rehacer</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Rehacer</TooltipContent>
                                </Tooltip>

                                <Separator orientation="vertical" className="mx-1 h-7" />

                                {/* Encabezados */}
                                <DropdownMenu>
                                    <Tooltip>
                                        <TooltipTrigger asChild>
                                            <DropdownMenuTrigger asChild>
                                                <Button
                                                    variant="ghost"
                                                    size="sm"
                                                    className="h-8 gap-1 px-2 text-xs"
                                                >
                                                    {editor.isActive("heading", { level: 1 }) ? (
                                                        <Heading1 className="h-4 w-4" />
                                                    ) : editor.isActive("heading", { level: 2 }) ? (
                                                        <Heading2 className="h-4 w-4" />
                                                    ) : editor.isActive("heading", { level: 3 }) ? (
                                                        <Heading3 className="h-4 w-4" />
                                                    ) : (
                                                        "Texto normal"
                                                    )}
                                                </Button>
                                            </DropdownMenuTrigger>
                                        </TooltipTrigger>
                                        <TooltipContent>Encabezados</TooltipContent>
                                    </Tooltip>
                                    <DropdownMenuContent>
                                        <DropdownMenuItem
                                            onClick={() => editor.chain().focus().setParagraph().run()}
                                            className={cn(
                                                "flex items-center gap-2",
                                                !editor.isActive("heading") && "bg-accent"
                                            )}
                                        >
                                            <div className="w-4" />
                                            <span>Texto normal</span>
                                        </DropdownMenuItem>
                                        <DropdownMenuItem
                                            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
                                            className={cn(
                                                "flex items-center gap-2",
                                                editor.isActive("heading", { level: 1 }) && "bg-accent"
                                            )}
                                        >
                                            <Heading1 className="h-4 w-4" />
                                            <span>Título 1</span>
                                        </DropdownMenuItem>
                                        <DropdownMenuItem
                                            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
                                            className={cn(
                                                "flex items-center gap-2",
                                                editor.isActive("heading", { level: 2 }) && "bg-accent"
                                            )}
                                        >
                                            <Heading2 className="h-4 w-4" />
                                            <span>Título 2</span>
                                        </DropdownMenuItem>
                                        <DropdownMenuItem
                                            onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
                                            className={cn(
                                                "flex items-center gap-2",
                                                editor.isActive("heading", { level: 3 }) && "bg-accent"
                                            )}
                                        >
                                            <Heading3 className="h-4 w-4" />
                                            <span>Título 3</span>
                                        </DropdownMenuItem>
                                    </DropdownMenuContent>
                                </DropdownMenu>

                                {/* Formato básico */}
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleBold().run()}
                                            className={cn("h-8 w-8", editor.isActive("bold") && "bg-accent")}
                                        >
                                            <Bold className="h-4 w-4" />
                                            <span className="sr-only">Negrita</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Negrita</TooltipContent>
                                </Tooltip>

                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleItalic().run()}
                                            className={cn("h-8 w-8", editor.isActive("italic") && "bg-accent")}
                                        >
                                            <Italic className="h-4 w-4" />
                                            <span className="sr-only">Cursiva</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Cursiva</TooltipContent>
                                </Tooltip>

                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleUnderline().run()}
                                            className={cn("h-8 w-8", editor.isActive("underline") && "bg-accent")}
                                        >
                                            <Underline className="h-4 w-4" />
                                            <span className="sr-only">Subrayado</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Subrayado</TooltipContent>
                                </Tooltip>

                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleStrike().run()}
                                            className={cn("h-8 w-8", editor.isActive("strike") && "bg-accent")}
                                        >
                                            <Strikethrough className="h-4 w-4" />
                                            <span className="sr-only">Tachado</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Tachado</TooltipContent>
                                </Tooltip>

                                <Separator orientation="vertical" className="mx-1 h-7" />

                                {/* Elementos de lista */}
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleBulletList().run()}
                                            className={cn("h-8 w-8", editor.isActive("bulletList") && "bg-accent")}
                                        >
                                            <List className="h-4 w-4" />
                                            <span className="sr-only">Lista de viñetas</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Lista de viñetas</TooltipContent>
                                </Tooltip>

                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleOrderedList().run()}
                                            className={cn("h-8 w-8", editor.isActive("orderedList") && "bg-accent")}
                                        >
                                            <ListOrdered className="h-4 w-4" />
                                            <span className="sr-only">Lista numerada</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Lista numerada</TooltipContent>
                                </Tooltip>

                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleBlockquote().run()}
                                            className={cn("h-8 w-8", editor.isActive("blockquote") && "bg-accent")}
                                        >
                                            <TextQuote className="h-4 w-4" />
                                            <span className="sr-only">Cita</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Cita</TooltipContent>
                                </Tooltip>

                                <Separator orientation="vertical" className="mx-1 h-7" />

                                {/* Alineación */}
                                <DropdownMenu>
                                    <Tooltip>
                                        <TooltipTrigger asChild>
                                            <DropdownMenuTrigger asChild>
                                                <Button
                                                    variant="ghost"
                                                    size="icon"
                                                    className="h-8 w-8"
                                                >
                                                    {editor.isActive({ textAlign: "left" }) ? (
                                                        <AlignLeft className="h-4 w-4" />
                                                    ) : editor.isActive({ textAlign: "center" }) ? (
                                                        <AlignCenter className="h-4 w-4" />
                                                    ) : editor.isActive({ textAlign: "right" }) ? (
                                                        <AlignRight className="h-4 w-4" />
                                                    ) : editor.isActive({ textAlign: "justify" }) ? (
                                                        <AlignJustify className="h-4 w-4" />
                                                    ) : (
                                                        <AlignLeft className="h-4 w-4" />
                                                    )}
                                                    <span className="sr-only">Alineación de texto</span>
                                                </Button>
                                            </DropdownMenuTrigger>
                                        </TooltipTrigger>
                                        <TooltipContent>Alineación de texto</TooltipContent>
                                    </Tooltip>
                                    <DropdownMenuContent>
                                        <DropdownMenuItem
                                            onClick={() => editor.chain().focus().setTextAlign("left").run()}
                                            className={cn(
                                                "flex items-center gap-2",
                                                editor.isActive({ textAlign: "left" }) && "bg-accent"
                                            )}
                                        >
                                            <AlignLeft className="h-4 w-4" />
                                            <span>Izquierda</span>
                                        </DropdownMenuItem>
                                        <DropdownMenuItem
                                            onClick={() => editor.chain().focus().setTextAlign("center").run()}
                                            className={cn(
                                                "flex items-center gap-2",
                                                editor.isActive({ textAlign: "center" }) && "bg-accent"
                                            )}
                                        >
                                            <AlignCenter className="h-4 w-4" />
                                            <span>Centro</span>
                                        </DropdownMenuItem>
                                        <DropdownMenuItem
                                            onClick={() => editor.chain().focus().setTextAlign("right").run()}
                                            className={cn(
                                                "flex items-center gap-2",
                                                editor.isActive({ textAlign: "right" }) && "bg-accent"
                                            )}
                                        >
                                            <AlignRight className="h-4 w-4" />
                                            <span>Derecha</span>
                                        </DropdownMenuItem>
                                        <DropdownMenuItem
                                            onClick={() => editor.chain().focus().setTextAlign("justify").run()}
                                            className={cn(
                                                "flex items-center gap-2",
                                                editor.isActive({ textAlign: "justify" }) && "bg-accent"
                                            )}
                                        >
                                            <AlignJustify className="h-4 w-4" />
                                            <span>Justificado</span>
                                        </DropdownMenuItem>
                                    </DropdownMenuContent>
                                </DropdownMenu>

                                <Separator orientation="vertical" className="mx-1 h-7" />

                                {/* Enlaces */}
                                <LinkToolbar />

                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={unsetLink}
                                            disabled={!editor.isActive("link")}
                                            className="h-8 w-8"
                                        >
                                            <Link2Off className="h-4 w-4" />
                                            <span className="sr-only">Quitar enlace</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Quitar enlace</TooltipContent>
                                </Tooltip>

                                <Separator orientation="vertical" className="mx-1 h-7" />

                                {/* Código y Formatos especiales */}
                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleCode().run()}
                                            className={cn("h-8 w-8", editor.isActive("code") && "bg-accent")}
                                        >
                                            <Code className="h-4 w-4" />
                                            <span className="sr-only">Código</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Código</TooltipContent>
                                </Tooltip>

                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleSuperscript().run()}
                                            className={cn("h-8 w-8", editor.isActive("superscript") && "bg-accent")}
                                        >
                                            <Superscript className="h-4 w-4" />
                                            <span className="sr-only">Superíndice</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Superíndice</TooltipContent>
                                </Tooltip>

                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleSubscript().run()}
                                            className={cn("h-8 w-8", editor.isActive("subscript") && "bg-accent")}
                                        >
                                            <Subscript className="h-4 w-4" />
                                            <span className="sr-only">Subíndice</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Subíndice</TooltipContent>
                                </Tooltip>

                                <Tooltip>
                                    <TooltipTrigger asChild>
                                        <Button
                                            variant="ghost"
                                            size="icon"
                                            onClick={() => editor.chain().focus().toggleCodeBlock().run()}
                                            className={cn("h-8 w-8", editor.isActive("codeBlock") && "bg-accent")}
                                        >
                                            <Terminal className="h-4 w-4" />
                                            <span className="sr-only">Bloque de código</span>
                                        </Button>
                                    </TooltipTrigger>
                                    <TooltipContent>Bloque de código</TooltipContent>
                                </Tooltip>

                                <Separator orientation="vertical" className="mx-1 h-7" />

                                {/* Imagen */}
                                <ImageButton editor={editor} />

                                {/* Imagen con enlace */}
                                <ImageLinkButton editor={editor} />

                                {/* Color y resaltado */}
                                <DropdownMenu>
                                    <Tooltip>
                                        <TooltipTrigger asChild>
                                            <DropdownMenuTrigger asChild>
                                                <Button
                                                    variant="ghost"
                                                    size="icon"
                                                    className="h-8 w-8"
                                                >
                                                    <Palette className="h-4 w-4" />
                                                    <span className="sr-only">Colores</span>
                                                </Button>
                                            </DropdownMenuTrigger>
                                        </TooltipTrigger>
                                        <TooltipContent>Color y resaltado</TooltipContent>
                                    </Tooltip>
                                    <DropdownMenuContent>
                                        <DropdownMenuSub>
                                            <DropdownMenuSubTrigger className="flex items-center gap-2">
                                                <Palette className="h-4 w-4" />
                                                <span>Color del texto</span>
                                            </DropdownMenuSubTrigger>
                                            <DropdownMenuSubContent className="grid grid-cols-5 gap-1 p-1">
                                                {['#000000', '#ee0000', '#ff8800', '#ffcc00', '#00cc00',
                                                    '#0000ff', '#cc00cc', '#777777', '#ffffff'].map((color) => (
                                                        <Button
                                                            key={color}
                                                            variant="ghost"
                                                            size="icon"
                                                            onClick={() => editor.chain().focus().setColor(color).run()}
                                                            className="h-6 w-6 rounded-md p-0"
                                                            style={{ backgroundColor: color }}
                                                        />
                                                    ))}
                                            </DropdownMenuSubContent>
                                        </DropdownMenuSub>
                                        <DropdownMenuSub>
                                            <DropdownMenuSubTrigger className="flex items-center gap-2">
                                                <Highlighter className="h-4 w-4" />
                                                <span>Resaltado</span>
                                            </DropdownMenuSubTrigger>
                                            <DropdownMenuSubContent className="grid grid-cols-5 gap-1 p-1">
                                                {['#ffff00', '#ffcc00', '#ff8800', '#ff0000', '#cc00ff',
                                                    '#00ccff', '#00cc00', '#eeeeee', 'transparent'].map((color) => (
                                                        <Button
                                                            key={color}
                                                            variant="ghost"
                                                            size="icon"
                                                            onClick={() => editor.chain().focus().toggleHighlight({ color }).run()}
                                                            className={cn("h-6 w-6 rounded-md p-0",
                                                                color === 'transparent' && "bg-transparent border border-dashed border-gray-300")}
                                                            style={color !== 'transparent' ? { backgroundColor: color } : {}}
                                                        >
                                                            {color === 'transparent' && <X className="h-4 w-4" />}
                                                        </Button>
                                                    ))}
                                            </DropdownMenuSubContent>
                                        </DropdownMenuSub>
                                    </DropdownMenuContent>
                                </DropdownMenu>

                                <div className="flex-1" />

                                {/* Herramientas secundarias */}
                                <SearchAndReplaceToolbar editor={editor} />
                            </div>
                        </div>
                        <ScrollBar className="hidden" orientation="horizontal" />
                    </ScrollArea>
                </TooltipProvider>
            </ToolbarProvider>
        </div>
    )
} 